<br>
<br>


Logic, First Course, Winter 2020. Week 10, Lecture 2. [Back to course website](https://ccle.ucla.edu/course/view.php?id=82647&section=11)

# Review for exam **with solutions**

This is intended to be review for the exam, in the form of a practice exam. Like the exam, there are 20 problems which fall into four groups corresponding to Weeks 6-9.

- [Week 6 problems](#week-6-problems)
- [Week 7 problems](#week-7-problems)
- [Week 8 problems](#week-8-problems)
- [Week 9 problems](#week-9-problems)

Please keep in mind that on the exam, there will be ample partial credit given for proofs. Hence, even if you don't get all the way done with the proof, try to get as much of it done as you can. Further, the proofs on the exam will be minor variations of the proofs which we are doing in this set and [the Week 10 Practice Problems](https://carnap.io/shared/logicteaching@g.ucla.edu/week10-practice-problems.pandoc).

The **solutions** consist, in the case of proofs, with a filled out proof. However, keep in mind that there are many equally good proofs of a given proposition. **Below** each proof is a brief 1-2 sentence explanation of the idea of the proof. For multiple choice questions, there is a brief explanation **below** the multiple choice question of the answer. The one large truth-table is not filled out.

<br>

## Week 6 problems

Each of these problems asks you to do a proof in the Week 6 deductive system. This is the system with just introduction and elimination rules for conjunction, arrow, and disjunction. Remember that the strategy in this system is: (1) try to do elimination rules at the top of your proof, and if that doesn't work, then (2) try to do an introduction rule at the bottom of your proof, and (3) repeat steps (1)-(2).

<br>

*Example 1*.

```{.ProofChecker .GamutMPND submission="none"}
 (a/\b)/\c :|-: (a\/c)
|(a/\b)/\c :assumption
|a/\b :E/\1
|a :E/\2
|a\/c :I\/3
```

The idea behind the **solution** in Example 1 is just to apply conjunction elimination as much as you can, and then to apply disjunction introduction.


<br>

<P style="page-break-before: always">

*Example 2*.

```{.ProofChecker .GamutMPND submission="none"}
 a->(b/\c), a, c->(d/\e) :|-: e
|a->(b/\c) :assumption
|a :assumption
|c->(d/\e) :assumption
|b/\c :E->1,2
|c :E/\4
|d/\e :E->3,5
|e :E/\6
```

The idea behind the **solution** in Example 2 is just to apply iterations of arrow elimination (aka modus ponens) and conjunction elimination.

<br>

<P style="page-break-before: always">

*Example 3*.

```{.ProofChecker .GamutMPND submission="none"}
 a->c, b->d, d->e :|-: (a/\b)->(d/\e)
|a->c :assumption
|b->d :assumption
|d->e :assumption
| a/\b :assumption
| a :E/\4
| c :E->1,5
| b :E/\4
| d :E->2,7
| e :E->3,8
| d/\e :I/\8,9
|(a/\b)->(d/\e) :I->4-10
```

The idea behind the **solution** in Example 3 is you want to prove an arrow statement `(a/\b)->(d/\e)`. You should be *sketching out* the proof on a sheet of paper before you begin. Put `(a/\b)->(d/\e)` down at the bottom of your page. Then get this by doing a bracket with `(a/\b)` at the top and `(d/\e)` at the bottom. Inside the bracket, you do the normal elimination of conjunction and arrow.

<br>

<P style="page-break-before: always">

*Example 4*.

```{.ProofChecker .GamutMPND submission="none"}
 (a\/b)->c, (a\/b)->d :|-: (a/\b)->(c/\d)
|(a\/b)->c :assumption
|(a\/b)->d :assumption
| a/\b :assumption
| a :E/\3
| a\/b :I\/4
| c :E->1,5
| d :E->2,5
| c/\d :I/\6,7
|(a/\b)->(c/\d) :I->3-8
```

The idea behind the **solution** in Example 4 is you want to prove an arrow statement `(a/\b)->(c/\d)`. Hence, you try to go from `a/\b` to `c/\d` inside brackets. But `a/\b` implies `a\/b`. Then one can get to `c/\d` by applying arrow elimination.

<br>

<P style="page-break-before: always">

*Example 5*.

```{.ProofChecker .GamutMPND submission="none"}
 a\/b, c->e, a->c, d->e, b->d :|-: e
|a\/b :assumption
|c->e :assumption
|a->c :assumption
|d->e :assumption
|b->d :assumption
| a :assumption
| c :E->3,6
| e :E->2,7
|a->e :I->6-8
| b :assumption
| d :E->10,5
| e :E->4,11
|b->e :I->10-12
|e :E\/1,9,13
```

The idea behind the **solution** in Example 5 is that it is a disjunction elimination. As usual, the best strategy is to form two arrow statements that say that the two disjuncts individually imply the conclusion. In this case, it is `a->e` and `b->e`. Then one just notes that these two arrows can be formed respectively from the premises `a->c` and `c->e`, as well as `b->d` and `d->e`. This is slightly challenging to see because the premises are not written in this order, but rather as `c->e` and `a->c`, as well as `d->e` and `b->d`.

<br>
<br>

<P style="page-break-before: always">

## Week 7 problems

Each of these problems asks you to do a proof in the Week 7 deductive system. This system just adds onto the Week 6 deductive system with the introduction and elimination rule for negation, as well as EFSQ and the repeat rule. Remember that falsum ⊥ can be written in the proof-checker (and on exam) as `!?`. You can also just copy and paste ⊥ from here.

<br>

*Example 6*.

```{.ProofChecker .GamutIPND submission="none"}
 ~a :|-: ~(a/\b)
|~a :assumption
| a/\b :assumption
| a :E/\2
| ⊥ :E~1,3
~(a/\b) :I~2-4
```

The idea of the **solution** to Example 6 is that one wants to get `~(a/\b)`, and so one needs to introduce the main connective of negation. This then involves going from `a/\b` to falsum in a bracket. But from `a/\b` you get `a`, and this and the premise `~a` get you falsum.

<br>

<P style="page-break-before: always">

*Example 7*.

```{.ProofChecker .GamutIPND submission="none"}
 (a/\b)->c :|-: ~c->~(a/\b)
|(a/\b)->c :assumption
| ~c :assumption
|  a/\b :assumption
|  c :E->3,1
|  ⊥ :E~2,4
| ~(a/\b) :I~3-5
|~c->~(a/\b) :I->2-6
```

The idea behind the **solution** to Example 7 is that you want to get the arrow statement `~c->~(a/\b)`. Hence, you will introduce the arrow, and go from `~c` to `~(a/\b)` inside a bracket. Like in the previous example,  to get `~(a/\b)`, and one needs to introduce the main connective of negation. This then involves going from `a/\b` to falsum in a bracket. Then it is just a simple arrow elimination to get `c` and you already had `~c` as a premise.

<br>

<P style="page-break-before: always">

*Example 8*.

```{.ProofChecker .GamutIPND submission="none"}
 a->b, b->c, c->~a :|-: ~a
|a->b :assumption
|b->c :assumption
|c->~a :assumption
| a :assumption
| b :E->1,4
| c :E->2,5
| ~a :E->3,6
| ⊥ :E~4,7
|~a :I~4-8
```

The idea behind the **solution** to Example 8 is that you want to get `~a`. Hence, you need to introuce the negation and go from `a` to falsum inside a bracket. The chain of premises essentially gives you a way to obtain `~a` from `a` vis a chain of modus ponens.

<br>

<P style="page-break-before: always">

*Example 9*.

On this one, keep in mind that we are proving it in the Week 7 system, and so we do not have disjunctive syllogism as a primitive rule. This proof is basically showing that a certain kind of disjunctive syllogism holds in the Week 7 system.

```{.ProofChecker .GamutIPND submission="none"}
 a\/(b/\c), ~a :|-: b/\c
|a\/(b/\c) :assumption
|~a :assumption
| a :assumption
| ⊥ :E~2,3
| b/\c :EFSQ4
|a->(b/\c) :I->3-5
| b/\c :assumption
| b/\c :rep 7
|(b/\c)->(b/\c) :I->7-8
|b/\c :E\/1,6,9
```

The idea behind the **solution** to this one is that you want to get `b/\c`. Since this is one of the disjuncts of `a\/(b/\c)`, you are essentially verifying positive disjunctive syllogism. The way to do this inside the Week 7 system is to do disjunction elimination on `a\/(b/\c)`. Hence, you need an arrow statement saying that you can get from the first disjunct `a` to the conclusion `b/\c`, and you need an arrow statement saying that you can get from the second disjunct `b/\c` to the conclusion `b/\c`. The latter is easy by repeat rule. The former goes through EFSQ, which says that after you get falsum from `a` and the premise `~a`, you can get anything you want, including `b/\c`.


<br>

<P style="page-break-before: always">

*Example 10*.

```{.ProofChecker .GamutIPND submission="none"}
 q :|-: ~~(p->q)
|q :assumption
| p :assumption
| q :rep 1
|p->q :I->2-3
| ~(p->q) :assumption
| ⊥ :E~4,5
|~~(p->q) :I~5-6
```

The idea behind the **solution** to this one is that you want to get `~~(p->q)`, and you need to view it as the negation of `~(p->q)`. (In the Week 8 system, where we have double-negation, this would be easier, and the conclusion would be equivalent to `p->q`). Hence to get `~~(p->q)` in the Week 7 system, you need to go from `~(p->q)` to falsum in a bracket. To do this, you'll need to get an arrow statement `p->q`. And you can do that via arrow introduction from premise `q` and the repeat rule.

<br>
<br>

<P style="page-break-before: always">

## Week 8 problems

These problems pertain to the Week 8 deductive system. Remember that the Week 8 deductive system has rules built in for modus tollens (MT), law of excluded middle (LEM), law of non-contradiction (LNC), double-negation (DN) commutativity (LCC, LCD), associativity (LAC, LAD), distribution (LDC, LCDD), distribution (LDC, LDD), and disjunctive syllogism (PDS, NDS). Also keep in mind that the strategy for the Week 8 deductive system is to look for patterns associated to these rules, as opposed to following the main connectives like we did in Weeks 6-7.


<br>

*Example 11*.

```{.ProofChecker .GamutPNDPlus submission="none"}
 (a->b)/\((b->c)/\(c->d))  :|-: (a->b)/\((c->d)/\(b->c))
|(a->b)/\((b->c)/\(c->d)) :assumption
|(a->b)/\((c->d)/\(b->c)) :LCC1
```

The idea behind the **solution** to Example 11 is just one application of commutativity for conjunction.

<br>

*Example 12*.

```{.ProofChecker .GamutPNDPlus submission="none"}
 ~(a\/b)->c  :|-: ~(b\/a)->c
|~(a\/b)->c :assumption
|~(b\/a)->c :LCD1
```

The idea behind the **solution** to Example 11 is just one application of commutativity for disjunction.


<br>

<P style="page-break-before: always">

*Example 13*.

```{.ProofChecker .GamutPNDPlus submission="none"}
 (a/\(b/\c))\/(~a/\(~b/\~c))  :|-: ((~a/\~b)/\~c)\/(a/\(b/\c))
|(a/\(b/\c))\/(~a/\(~b/\~c)) :assumption
|(~a/\(~b/\~c))\/(a/\(b/\c)) :LCD1
|((~a/\~b)/\~c)\/(a/\(b/\c)) :LAC2
```

The idea behind the **solution** to Example 13 is just commutativity of disjunction followed by associativity of conjunction.

<br>

<P style="page-break-before: always">

*Example 14*.

```{.ProofChecker .GamutPNDPlus submission="none"}
 a\/(b/\c), (a\/b)->~d, (a\/c)->~e  :|-: ~(d\/e)
|a\/(b/\c) :assumption
|(a\/b)->~d :assumption
|(a\/c)->~e :assumption
|(a\/b)/\(a\/c) :LDD1
|a\/b :E/\4
|a\/c :E/\4
|~d :E->2,5
|~e :E->3,6
|~d/\~e :I/\7,8
|~(d\/e) :DMAND9
```

The idea behind the **solution** to Example 14 is distribution followed by some arrow elimination and DeMorgan.

<br>

<P style="page-break-before: always">

*Example 15*.


```{.ProofChecker .GamutPNDPlus submission="none"}
 (~(a/\b)/\b) :|-: ~a
|(~(a/\b)/\b) :assumption
|~(a/\b) :E/\1
|~(b/\a) :LCC2
|b :E/\1
|~a :NDS3,4
```

The idea behind the **solution** to Example 15 is negative disjunctive syllogism. The only tricky thing is that one has to separate out the two conjuncts first, and then do some commutativity of conjunction to get the pattern to match up exactly to negative disjunctive syllogism.

<P style="page-break-before: always">

*Example 16*.

By the [Soundness and Completeness Theorems](https://carnap.io/shared/logicteaching@g.ucla.edu/week08-lecture-2-ND-completeness.pandoc#the-soundness-theorem-and-the-completeness-theorem), we can assess the validity of this argument using truth-tables as well. Fill out the following truth-table, just like we did in Week 3:


~~~{.TruthTable .Validity system="gamutPND" options="nodash autoAtoms" submission="none"}
 (~(a/\b)/\b) :|-: ~a
|FTTTFTTFT
|TTFFFFTFT
|TFFTTTTTF
|TFFFFFTTF
~~~

The **solution** here is just the filled out truth-table, as up above. Note that `(~(a/\b)/\b)` is true on only one row, and that `b` is true on two rows. This is the information we will need in Example 20.

<br>
<br>

## Week 9 problems

These problems pertain to the materials from Week 9 and the first lecture of Week 10.

<br>

*Example 17*

Consider the scale (always, often, sometimes). Suppose Laura and Sofia are talking about commuting, and Laura asks: "Do you drive to campus" and that Sofia responds by saying that "sometimes." Which of the following is a conversational implicature of Sofia's having said that?

```{.QualitativeProblem .MultipleChoice submission="none" options="check"}
 Which one?
| +It is not the case that Sofia always drives to campus.
| +It is not the case that Sofia often drives to campus.
| It is not the case that Sofia sometimes drives to campus.
| It is not the case that Sofia believes that she sometimes drives to campus.
```

The **solution** is either of the first two, since these are to the left of `sometimes` in the scale (always, often, sometimes). These first two answers do not have `believe` in them, since the subject-matter is so closely related to Sofia that one would believe it if and only if it were true.


<br>

*Example 18*

Suppose that Lily meets Sara for the first time and asks Sara how long she has been working at her present job. Suppose that Sara responds by saying that she quit her last job because she did not like the hours. It seems that Sara has violated one of Grice's conversational maxims. Which one?

```{.QualitativeProblem .MultipleChoice submission="none" options="check"}
 Which one?
| Quantity
| Quality
| +Relation
| Manner
```

The **solution** is the third one, since her answer violates relevance to the question asked.

<br>

*Example 19*

Suppose that the probability of $p\vee q$ is 3/10 and the probability of $p\vee r$ is 4/10 and the probability of $p\vee (q\vee r)$ is 6/10. What is the probability of $p\vee (q\wedge r)$? *Hint*: use distribution.

```{.QualitativeProblem .MultipleChoice submission="none" options="check"}
 What is it?
| 0/10
| +1/10
| 2/10
| 3/10
```

The **solution** is just `3/10+4/10-6/10`, which is `1/10`.

<br>


*Example 20*

Suppose that each of the rows in the truth-table in Example 16 is weighted equally, that is each has equal chance of happening, namely a 1/4 chance of happening. What is the probability of $\neg (a\wedge b)$ conditional on $b$?

```{.QualitativeProblem .MultipleChoice submission="none" options="check"}
 What is it?
| 1/4
| +2/4
| 3/4
| 4/4
```

The **solution** is the second one, since from Example 16 we know that the probability of $(\neg (a\wedge b)\wedge b)$ is 1/4 and the probability of $b$ is 2/4, and so we have 1/4 divided by 2/4, which is the same as 1/4 times 4/2, which is 1/2 or 2/4.

<br>
<br>

This is a review set for [this course](https://ccle.ucla.edu/course/view/20W-PHILOS31-1?section=11). It is run on the Carnap software, which is an:
